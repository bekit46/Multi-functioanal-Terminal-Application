import java.util.Scanner;

public class projectOptionb{
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        FunctionB(scanner);
        scanner.close();
    }


    public static void FunctionB(Scanner scanner)
    {
        boolean exit = false;
        boolean err = false;
        clearConsole();
        System.out.println("MATRIX OPERATIONS");
        while (!exit) {
            if(err)
                System.out.println("MATRIX OPERATIONS");
            System.out.println("[1] Transpose Matrix");
            System.out.println("[2] Inverse Matrix");
            System.out.println("[3] Matrix Multiplication");
            System.out.println("[4] Element-Wise Multiplication");
            System.out.println("[5] Exit");
            if(err)
            {
                System.out.println("\nInvalid choice. Please select a valid option.");
                err = false;
            }
            System.out.print("Select an option: ");
            String choice = scanner.nextLine().toUpperCase();

            switch (choice) {
                case "1":
                    transposeMatrix(scanner);
                    break;
                case "2":
                    inverseMatrix(scanner);
                    break;
                case "3":
                    matrixMultiplication(scanner);
                    break;
                case "4":
                    elementWiseMultiplication(scanner);
                    break;
                case "5":
                    exit = true;
                    break;
                default:
                    clearConsole();
                    err = true;
            }
        }
    }

    public static double[][] getMatrix(Scanner scanner,String operation)
    {
        int rows = 0;
        int cols = 0;
        
        // Satır sayısını al
        rows = getSize(scanner, "Enter the rows of the matrix (or X to exit): ", "MATRIX OPERATIONS: "+operation, "MATRIX OPERATIONS: "+operation);
        if(rows == -1)
            return null;

         // Sütun sayısını al
        clearConsole();
        System.out.println("MATRIX OPERATIONS: "+operation);
        cols = getSize(scanner, "Enter the columns of the matrix (or X to exit): ", "MATRIX OPERATIONS: "+operation, "MATRIX OPERATIONS: "+operation);
        if(cols == -1)
            return null;

        // Matrisi oluştur
        double[][] matrix = new double[rows][cols];
        boolean err = false;

        // Elemanları al
        clearConsole();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                while (true) {
                    System.out.println("MATRIX OPERATIONS: "+operation);
                    printMatrix(matrix);
                    if(err)
                    {
                        System.out.println("Error: Please enter a valid number!");
                        err = false;
                    }
                    System.out.print("Enter value for (" + (i + 1) + ", " + (j + 1) + ") element (or X to exit): ");
                    String elementInput = scanner.next().trim().toUpperCase();

                    if (elementInput.equals("X")) {
                        scanner.nextLine();
                        return null; // Çıkış
                    }

                    if (elementInput.matches("-?\\d+(\\.\\d+)?")) {
                        matrix[i][j] = Double.parseDouble(elementInput);
                        clearConsole();
                        break;
                    } else {
                        clearConsole();
                        err = true;
                    }
                }
            }
        }
        scanner.nextLine();
        return matrix;
    }

    public static double[][] getParamaterizedMatrix(int row, int col,Scanner scanner,String operation)
    {
        boolean err = false;
        double[][] matrix = new double[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                while (true) {
                    System.out.println("MATRIX OPERATIONS: "+operation);
                    printMatrix(matrix);
                    if(err)
                    {
                        System.out.println("Error: Please enter a valid number!");
                        err = false;
                    }
                    System.out.print("Enter value for (" + (i + 1) + ", " + (j + 1) + ") element (or X to exit): ");
                    String elementInput = scanner.next().trim().toUpperCase();

                    if (elementInput.equals("X")) {
                        scanner.nextLine();
                        return null; // Çıkış
                    }

                    if (elementInput.matches("-?\\d+(\\.\\d+)?")) {
                        matrix[i][j] = Double.parseDouble(elementInput);
                        clearConsole();
                        break;
                    } else {
                        clearConsole();
                        err = true;
                    }
                }
            }
        }
        return matrix;
    }

    public static void transposeMatrix(Scanner scanner)
    {
        clearConsole();
        System.out.println("MATRIX OPERATIONS: TRANSPOSE");

        double[][] matrix = getMatrix(scanner,"TRANSPOSE");
        if(matrix == null){
            clearConsole();
            System.out.println("MATRIX OPERATIONS");
            return;
        }
        clearConsole();
        System.out.println("MATRIX OPERATIONS: TRANSPOSE");
        System.out.println("Entered Matrix");
        printMatrix(matrix);
        int rows = matrix.length;
        int cols = matrix[0].length;
        double[][] transpose = new double[cols][rows];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                transpose[j][i] = matrix[i][j];
            }
        }

        System.out.println("Transposed Matrix:");
        printMatrix(transpose);

        System.out.println("Press enter to return to the main menu: ");
        scanner.nextLine();
        clearConsole();
        System.out.println("MATRIX OPERATIONS");
    }

    public static void inverseMatrix(Scanner scanner)
    {
        clearConsole();
        System.out.println("MATRIX OPERATIONS: INVERSE");
        int rows = 0;

        rows = getSize(scanner, "Enter the rows of the matrix (cols will be automatically assigned to same size) (or X to exit): ", "MATRIX OPERATIONS", "MATRIX OPERATIONS: INVERSE");
        if(rows == -1)
            return;

        clearConsole();
        double[][] matrix = getParamaterizedMatrix(rows, rows, scanner, "INVERSE");
        if(matrix == null)
        {
            clearConsole();
            System.out.println("MATRIX OPERATIONS");
            return;
        }
        double[][] augmented = new double[rows][2 * rows];

        // Build the augmented matrix [matrix | identity]
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < rows; j++) {
                augmented[i][j] = matrix[i][j];
            }
            augmented[i][i + rows] = 1;
        }

        // Apply Gauss-Jordan elimination
        for (int i = 0; i < rows; i++) {
            double diagElement = augmented[i][i];
            if (diagElement == 0) {
                clearConsole();
                System.out.println("MATRIX OPERATIONS: INVERSE");
                printMatrix(matrix);
                System.out.println("Matrix is singular and cannot be inverted.");
                scanner.nextLine();
                System.out.println("Press enter to return to the main menu: ");
                scanner.nextLine();
                clearConsole();
                return;
            }

            for (int j = 0; j < 2 * rows; j++) {
                augmented[i][j] /= diagElement;
            }

            for (int k = 0; k < rows; k++) {
                if (k != i) {
                    double factor = augmented[k][i];
                    for (int j = 0; j < 2 * rows; j++) {
                        augmented[k][j] -= factor * augmented[i][j];
                    }
                }
            }
        }

        // Extract the inverse from the augmented matrix
        double[][] inverse = new double[rows][rows];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < rows; j++) {
                inverse[i][j] = augmented[i][j + rows]; // Copy the right side of augmented to inverse
            }
        }

        clearConsole();
        System.out.println("MATRIX OPERATIONS: INVERSE");
        System.out.println("Entered Matrix");
        printMatrix(matrix);
        System.out.println("\nInverse of the Matrix");
        printMatrix(inverse);

        scanner.nextLine();
        System.out.println("Press enter to return to the main menu: ");
        scanner.nextLine();
        clearConsole();
        System.out.println("MATRIX OPERATIONS");
    }

    public static void matrixMultiplication(Scanner scanner)
    {
        int rows1 = 0;
        int cols1 = 0;
        int cols2 = 0;
        clearConsole();
        
        System.out.println("MATRIX OPERATIONS: MATRIX MULTIPLICATION");

        rows1 = getSize(scanner, "Enter the rows of the first matrix (or X to exit): ", "MATRIX OPERATIONS", "MATRIX OPERATIONS: MATRIX MULTIPLICATION");
        if(rows1 == -1)
            return;

        clearConsole();
        System.out.println("MATRIX OPERATIONS: MATRIX MULTIPLICATION");

        cols1 = getSize(scanner, "Enter the cols of the first matrix (or X to exit): ", "MATRIX OPERATIONS", "MATRIX OPERATIONS: MATRIX MULTIPLICATION");
        if(cols1 == -1)
            return;

        clearConsole();
        double[][] matrix1 = getParamaterizedMatrix(rows1, cols1 ,scanner ,"MATRIX MULTIPLICATION");
        if(matrix1==null){
            clearConsole();
            System.out.println("MATRIX OPERATIONS");
            return;
        }

        clearConsole();
        System.out.println("MATRIX OPERATIONS: MATRIX MULTIPLICATION");

        cols2 = getSize(scanner, "Enter the cols of the second matrix (rows is automatically assigned to " + cols1 + " ,cols of the first matrix)(or X to exit): ", "MATRIX OPERATIONS", "MATRIX OPERATIONS: MATRIX MULTIPLICATION");
        if(cols2 == -1)
            return;

        clearConsole();
        double[][] matrix2 = getParamaterizedMatrix(cols1, cols2,scanner,"MATRIX MULTIPLICATION");
        if(matrix2==null){
            clearConsole();
            System.out.println("MATRIX OPERATIONS");
            return;
        }
        
        double[][] result = new double[rows1][cols2];

        for (int i = 0; i < rows1; i++) {
            for (int j = 0; j < cols2; j++) {
                for (int k = 0; k < cols1; k++) {
                    result[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }
        
        clearConsole();
        System.out.println("MATRIX OPERATIONS: MATRIX MULTIPLICATION");
        System.out.println("First Matrix");
        printMatrix(matrix1);

        System.out.println("Second Matrix");
        printMatrix(matrix2);

        System.out.println("Multiplied Matrix");
        printMatrix(result);

        scanner.nextLine();
        System.out.println("Press enter to return to the main menu: ");
        scanner.nextLine();
        clearConsole();
        System.out.println("MATRIX OPERATIONS");
    }

    public static void elementWiseMultiplication(Scanner scanner)
    {
        clearConsole();
        System.out.println("MATRIX OPERATIONS: ELEMENT-WISE MULTIPLICATION");
        double[][] matrix1 = getMatrix(scanner,"ELEMENT-WISE MULTIPLICATION");
        if(matrix1==null){
            clearConsole();
            System.out.println("MATRIX OPERATIONS");
            return;
        }
        int row = matrix1.length;
        int col = matrix1[0].length;
        double[][] matrix2 = getParamaterizedMatrix(row, col,scanner,"ELEMENT-WISE MULTIPLICATION");
        if(matrix2==null){
            clearConsole();
            System.out.println("MATRIX OPERATIONS");
            return;
        }
        double[][] multipliedMatrix = new double[row][col];

        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                multipliedMatrix[i][j] = matrix1[i][j]*matrix2[i][j];
            }
        }

        System.out.println("MATRIX OPERATIONS: ELEMENT-WISE MULTIPLICATION");
        System.out.println("First Matrix");
        printMatrix(matrix1);

        System.out.println("Second Matrix");
        printMatrix(matrix2);

        System.out.println("Element-wise Multiplied Matrix");
        printMatrix(multipliedMatrix);

        System.out.println("Press enter to return to the main menu: ");
        scanner.nextLine();
        scanner.nextLine();
        clearConsole();
        System.out.println("MATRIX OPERATIONS");
    }

   public static void printMatrix(double[][] matrix)
   {
        int maxLength = getMaxLength(matrix); // get the largest length number

        // Print the top border
        System.out.print("┌");
        for (int i = 0; i < matrix[0].length; i++) {
            System.out.print("──");
            System.out.print("─".repeat(maxLength));
            if (i < matrix[0].length - 1) System.out.print("┬");
        }
        System.out.println("┐");

        // Print each row with vertical separators
        for (int i = 0; i < matrix.length; i++) {
            System.out.print("│");
            for (int j = 0; j < matrix[i].length; j++) {
                System.out.printf("%" + maxLength + ".2f  ", matrix[i][j]);
                System.out.print("│");
            }
            System.out.println();

            // Print row separator if not the last row
            if (i < matrix.length - 1) {
                System.out.print("├");
                for (int j = 0; j < matrix[i].length; j++) {
                    System.out.print("──");
                    System.out.print("─".repeat(maxLength));
                    if (j < matrix[i].length - 1) System.out.print("┼");
                }
                System.out.println("┤");
            }
        }

        // Print the bottom border
        System.out.print("└");
        for (int i = 0; i < matrix[0].length; i++) {
            System.out.print("──");
            System.out.print("─".repeat(maxLength));
            if (i < matrix[0].length - 1) System.out.print("┴");
        }
        System.out.println("┘");
    }

    // Helper method to get the max length for formatting
    private static int getMaxLength(double[][] matrix) {
        int maxLength = 5; // Default width for values like "0.00"

        for (double[] row : matrix) {
            for (double value : row) {
                int length = String.format("%.2f", value).length();
                if (length > maxLength) {
                    maxLength = length;
                }
            }
        }
        return maxLength + 1; // Adding 1 for padding
    }

    public static int getSize(Scanner scanner, String message1, String message2, String message3)
    {
        while (true) {
            int size = 0;
            System.out.print(message1);
            String input = scanner.next().trim().toUpperCase();
            if (input.equals("X")) {
                scanner.nextLine();
                clearConsole();
                System.out.println(message2);
                return -1; // Çıkış
            }

            if (input.matches("-?\\d+")) {
                size = Integer.parseInt(input);
                if (size >= 1) {
                    return size;
                } else {
                    clearConsole();
                    System.out.println(message3);
                    System.out.println("Error: " + size + " not greater than 0. Please enter a number greater than 0");
                }
            } else {
                clearConsole();
                System.out.println(message3);
                System.out.println("Error: Please enter a valid size!");
            }
        }
    }

    private static void clearConsole()
    {
        System.out.print("\033[H\033[2J");
        System.out.flush();
    }

}
